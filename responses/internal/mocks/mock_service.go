// Code generated by MockGen. DO NOT EDIT.
// Source: responses/internal/service/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/qaZar1/HHforURFU/responses/internal/models"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// AddResponses mocks base method.
func (m *MockServiceInterface) AddResponses(respons models.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResponses", respons)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResponses indicates an expected call of AddResponses.
func (mr *MockServiceInterfaceMockRecorder) AddResponses(respons interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResponses", reflect.TypeOf((*MockServiceInterface)(nil).AddResponses), respons)
}

// GetResponseByID mocks base method.
func (m *MockServiceInterface) GetResponseByID(id int64) (models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseByID", id)
	ret0, _ := ret[0].(models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponseByID indicates an expected call of GetResponseByID.
func (mr *MockServiceInterfaceMockRecorder) GetResponseByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseByID", reflect.TypeOf((*MockServiceInterface)(nil).GetResponseByID), id)
}

// GetResponsesByEmployersID mocks base method.
func (m *MockServiceInterface) GetResponsesByEmployersID(id int64) ([]models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsesByEmployersID", id)
	ret0, _ := ret[0].([]models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsesByEmployersID indicates an expected call of GetResponsesByEmployersID.
func (mr *MockServiceInterfaceMockRecorder) GetResponsesByEmployersID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsesByEmployersID", reflect.TypeOf((*MockServiceInterface)(nil).GetResponsesByEmployersID), id)
}

// GetResponsesByUsername mocks base method.
func (m *MockServiceInterface) GetResponsesByUsername(username string) ([]models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsesByUsername", username)
	ret0, _ := ret[0].([]models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsesByUsername indicates an expected call of GetResponsesByUsername.
func (mr *MockServiceInterfaceMockRecorder) GetResponsesByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsesByUsername", reflect.TypeOf((*MockServiceInterface)(nil).GetResponsesByUsername), username)
}

// UpdateResponse mocks base method.
func (m *MockServiceInterface) UpdateResponse(response_id int, updateRespons models.Response) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResponse", response_id, updateRespons)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResponse indicates an expected call of UpdateResponse.
func (mr *MockServiceInterfaceMockRecorder) UpdateResponse(response_id, updateRespons interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResponse", reflect.TypeOf((*MockServiceInterface)(nil).UpdateResponse), response_id, updateRespons)
}
