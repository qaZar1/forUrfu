// Package server Code generated by swaggo/swag. DO NOT EDIT
package server

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/checkEmployer/{employer_id}": {
            "get": {
                "description": "При обращении, проверятся, сущестувет ли работодатель",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "APIs"
                ],
                "summary": "Проверка, существует ли работодатель",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Username работодателя",
                        "name": "employer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запрос выполнен успешно",
                        "schema": {
                            "$ref": "#/definitions/employer"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных"
                    },
                    "401": {
                        "description": "Ошибка авторизации"
                    },
                    "500": {
                        "description": "Произошла внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/api/checkEmployerByUsername/{username}": {
            "get": {
                "description": "При обращении, проверятся, сущестувет ли работодатель",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "APIs"
                ],
                "summary": "Проверка, какой id у работодателя с данным username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username работодателя",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запрос выполнен успешно",
                        "schema": {
                            "$ref": "#/definitions/employer"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных"
                    },
                    "401": {
                        "description": "Ошибка авторизации"
                    },
                    "500": {
                        "description": "Произошла внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/api/loginEmployer": {
            "get": {
                "description": "Генерирует JWT токен",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Получение токена",
                "responses": {
                    "200": {
                        "description": "Запрос выполнен успешно",
                        "schema": {
                            "$ref": "#/definitions/token_response"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных"
                    },
                    "401": {
                        "description": "Ошибка авторизации"
                    },
                    "500": {
                        "description": "Произошла внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/api/registerEmployer": {
            "post": {
                "description": "При обращении, регистрируется работодатель",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "APIs"
                ],
                "summary": "Регистрация работодателя",
                "parameters": [
                    {
                        "description": "Данные о работодателе",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/employer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Запрос выполнен успешно"
                    },
                    "400": {
                        "description": "Ошибка валидации данных"
                    },
                    "401": {
                        "description": "Ошибка авторизации"
                    },
                    "500": {
                        "description": "Произошла внутренняя ошибка сервера"
                    }
                }
            }
        }
    },
    "definitions": {
        "employer": {
            "type": "object",
            "properties": {
                "company": {
                    "type": "string"
                },
                "employer_id": {
                    "type": "integer"
                },
                "f_name": {
                    "type": "string"
                },
                "password_hash": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "token_response": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1N74VlQTsu4TStQiloLfN0ENf6d64Ar0uSbrvtbUqFMGQ"
                },
                "expires_in": {
                    "type": "integer",
                    "example": 18000
                },
                "token_type": {
                    "type": "string",
                    "example": "Bearer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "3.0",
	Host:             "localhost:8001",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Authentication API",
 Description:"# Postgres\n"+
"",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
